{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "challenger",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "opponent",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "Log",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "RewardLog",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_challenger",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_move",
          "type": "uint8"
        }
      ],
      "name": "opponentMove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_opponent",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_move",
          "type": "uint8"
        }
      ],
      "name": "startGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x98c6604ba6674cc1e52c1c4f5cf1098d8f7c221b850b8059c2997be3698ea6b2",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1721220",
    "logsBloom": "0x
    "blockHash": "0xec98d3c748c5d8bdef7006157f905d6669fc37dc1720f2ff80bdf5c577ede064",
    "transactionHash": "0x98c6604ba6674cc1e52c1c4f5cf1098d8f7c221b850b8059c2997be3698ea6b2",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1721220",
    "status": 1,
    "byzantium": true
  },
  "args": [
    10,
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "solcInputHash": "0abed9e9b0c569c9b789b0989f925b11",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"opponent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"RewardLog\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_challenger\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_move\",\"type\":\"uint8\"}],\"name\":\"opponentMove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_opponent\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_move\",\"type\":\"uint8\"}],\"name\":\"startGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RockPaperScissors.sol\":\"RockPaperScissors\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/RockPaperScissors.sol\":{\"content\":\"pragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract RockPaperScissors {\\n    address player;\\n    address opponent;\\n    uint256 public entranceFee;\\n    address public token;\\n\\n    mapping(address => Game[]) private games;\\n    mapping(address => uint256) public rewards;\\n\\n    event RewardLog(address indexed, uint256 amount, string message);\\n\\n    event Log(\\n        address indexed challenger,\\n        address indexed opponent,\\n        string message\\n    );\\n\\n    enum Status {\\n        Playing,\\n        Challenger,\\n        Opponent,\\n        Tie\\n    }\\n\\n    struct Game {\\n        Status status;\\n        uint8 move1;\\n        uint8 move2;\\n        address challenger;\\n        address opponent;\\n        uint256 jackpot;\\n    }\\n\\n    constructor(uint256 _entranceFee, address _token) {\\n        entranceFee = _entranceFee;\\n        token = _token;\\n    }\\n\\n    // Start a game by depositing the enrollment fee, choosing your opponent and specifying your move\\n    // 0 = Rock\\n    // 1 = Paper\\n    // 2 = Scissors\\n\\n    function startGame(\\n        uint256 _amount,\\n        address _opponent,\\n        uint8 _move\\n    ) public {\\n        require(_amount >= entranceFee, \\\"fee to low\\\");\\n        (bool isChallenged, uint256 index) = isChallengedMethod(\\n            msg.sender,\\n            _opponent\\n        );\\n        require(\\n            isChallenged == false,\\n            \\\"Already challenged this player to a game\\\"\\n        );\\n        require(\\n            _move == 0 || _move == 1 || _move == 2,\\n            \\\"move hast to be 0=Rock, 1=Paper, 2=Scissors\\\"\\n        );\\n        IERC20(token).transferFrom(msg.sender, address(this), _amount);\\n        games[msg.sender].push(\\n            Game({\\n                move1: _move,\\n                move2: 5,\\n                status: Status.Playing,\\n                challenger: msg.sender,\\n                opponent: _opponent,\\n                jackpot: _amount\\n            })\\n        );\\n        emit Log(msg.sender, _opponent, \\\"game created\\\");\\n    }\\n\\n    // Soneone Challanged you to a game, play by depositing the enrollment fee, providing the Challengers address and specifying your move\\n    // 0 = Rock\\n    // 1 = Paper\\n    // 2 = Scissors\\n\\n    function opponentMove(\\n        uint256 _amount,\\n        address _challenger,\\n        uint8 _move\\n    ) public {\\n        require(_amount >= entranceFee, \\\"fee to low\\\");\\n        (bool isChallenged, uint256 index) = isChallengedMethod(\\n            _challenger,\\n            msg.sender\\n        );\\n        require(isChallenged == true, \\\"Player did not challenge you to a game\\\");\\n        require(\\n            games[msg.sender][index].status == Status.Playing,\\n            \\\"Game already over\\\"\\n        );\\n        require(\\n            _move == 0 || _move == 1 || _move == 2,\\n            \\\"move hast to be 0=Rock, 1=Paper, 2=Scissors\\\"\\n        );\\n        IERC20(token).transferFrom(msg.sender, address(this), _amount);\\n\\n        games[msg.sender][index].move2 = _move;\\n        games[msg.sender][index].jackpot = _amount;\\n\\n        Status gameStatus = logic(games[msg.sender][index].move1, _move);\\n\\n        uint256 price = games[msg.sender][index].jackpot + _amount;\\n\\n        if (gameStatus == Status.Tie) {\\n            rewards[_challenger] =\\n                rewards[_challenger] +\\n                games[_challenger][index].jackpot;\\n            rewards[msg.sender] = rewards[msg.sender] + _amount;\\n            emit Log(_challenger, msg.sender, \\\"Its a Tie\\\");\\n        } else if (gameStatus == Status.Challenger) {\\n            rewards[_challenger] = rewards[_challenger] + price;\\n            emit Log(_challenger, msg.sender, \\\"Challenger Won the Game\\\");\\n        } else {\\n            rewards[msg.sender] = rewards[msg.sender] + price;\\n            emit Log(_challenger, msg.sender, \\\"Challenger lost the Game\\\");\\n        }\\n        games[msg.sender][index].status = gameStatus;\\n    }\\n\\n    function claimReward() public {\\n        require(rewards[msg.sender] > 0, \\\"no rewards\\\");\\n        uint256 reward = rewards[msg.sender];\\n        rewards[msg.sender] = 0;\\n        IERC20(token).transferFrom(address(this), msg.sender, reward);\\n        emit RewardLog(msg.sender, rewards[msg.sender], \\\"Reward claimed\\\");\\n    }\\n\\n    function isChallengedMethod(address _challenger, address _opponent)\\n        internal\\n        view\\n        returns (bool, uint256)\\n    {\\n        bool isChallenged = false;\\n        uint256 index = 0;\\n        for (uint256 i = 0; i < games[_challenger].length; i++) {\\n            if (games[_challenger][i].opponent == _opponent) {\\n                isChallenged = true;\\n                index = i;\\n                return (isChallenged, index);\\n            }\\n        }\\n        return (isChallenged, index);\\n    }\\n\\n    function logic(uint8 _challenger, uint8 _opponent)\\n        internal\\n        pure\\n        returns (Status)\\n    {\\n        Status gameStatus;\\n        if (_challenger == _opponent) {\\n            gameStatus = Status.Tie;\\n            return gameStatus;\\n        } else if (\\n            (_challenger == 0 && _opponent == 2) ||\\n            (_challenger == 1 && _opponent == 0) ||\\n            (_challenger == 2 && _opponent == 1)\\n        ) {\\n            gameStatus = Status.Challenger;\\n            return gameStatus;\\n        } else {\\n            gameStatus = Status.Opponent;\\n            return gameStatus;\\n        }\\n    }\\n    // submit their unique move\\n    // contract decieds who won\\n\\n    // Stretch Goals\\n    // Include any tests using Hardhat\\n    // anyone 2 player can play against each other\\n    // reduce gas cost\\n    // Let players bet their previous winnings.\\n    // How can you entice players to play, knowing that they may have their funds stuck in the contract if they face an uncooperative player?\\n}\\n\",\"keccak256\":\"0xe993179897d2846934209505353588bace1e83e4c4adbc3e12a95b3e16499fd5\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001ef438038062001ef48339818101604052810190620000379190620000b5565b8160028190555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000168565b600081519050620000988162000134565b92915050565b600081519050620000af816200014e565b92915050565b60008060408385031215620000c957600080fd5b6000620000d9858286016200009e565b9250506020620000ec8582860162000087565b9150509250929050565b600062000103826200010a565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6200013f81620000f6565b81146200014b57600080fd5b50565b62000159816200012a565b81146200016557600080fd5b50565b611d7c80620001786000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630700037d14610067578063649677e114610097578063690d1d3b146100b5578063b08a9ca3146100d1578063b88a802f146100ed578063fc0c546a146100f7575b600080fd5b610081600480360381019061007c9190611566565b610115565b60405161008e9190611938565b60405180910390f35b61009f61012d565b6040516100ac9190611938565b60405180910390f35b6100cf60048036038101906100ca91906115b8565b610133565b005b6100eb60048036038101906100e691906115b8565b610c5a565b005b6100f56110a8565b005b6100ff6112f5565b60405161010c91906117a6565b60405180910390f35b60056020528060005260406000206000915090505481565b60025481565b600254831015610178576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016f90611878565b60405180910390fd5b600080610185843361131b565b9150915060011515821515146101d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c790611898565b60405180910390fd5b6000600381111561020a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110610281577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160000160009054906101000a900460ff1660038111156102d8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14610318576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030f906118b8565b60405180910390fd5b60008360ff16148061032d575060018360ff16145b8061033b575060028360ff16145b61037a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610371906118d8565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b81526004016103d9939291906117c1565b602060405180830381600087803b1580156103f357600080fd5b505af1158015610407573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042b919061158f565b5082600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106104a4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160000160026101000a81548160ff021916908360ff16021790555084600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110610545577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600302016002018190555060006105fb600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481106105d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160000160019054906101000a900460ff1685611483565b9050600086600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110610677577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201600201546106939190611992565b90506003808111156106ce577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b826003811115610707577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561091957600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110610784577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160020154600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546107e09190611992565b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555086600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461086e9190611992565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f4e0d5ecfe1a9bdb989299ad039e950ed9ad6b09bc1f35ba6fc490f11eed70d8360405161090c90611918565b60405180910390a3610b7b565b60016003811115610953577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b82600381111561098c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610a885780600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109dd9190611992565b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f4e0d5ecfe1a9bdb989299ad039e950ed9ad6b09bc1f35ba6fc490f11eed70d83604051610a7b90611838565b60405180910390a3610b7a565b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ad39190611992565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f4e0d5ecfe1a9bdb989299ad039e950ed9ad6b09bc1f35ba6fc490f11eed70d83604051610b71906118f8565b60405180910390a35b5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110610bf3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160000160006101000a81548160ff02191690836003811115610c4c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555050505050505050565b600254831015610c9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9690611878565b60405180910390fd5b600080610cac338561131b565b915091506000151582151514610cf7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cee90611818565b60405180910390fd5b60008360ff161480610d0c575060018360ff16145b80610d1a575060028360ff16145b610d59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d50906118d8565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b8152600401610db8939291906117c1565b602060405180830381600087803b158015610dd257600080fd5b505af1158015610de6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0a919061158f565b50600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060c0016040528060006003811115610e8f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020018560ff168152602001600560ff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff16815260200187815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548160ff02191690836003811115610f5d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360ff16021790555060608201518160000160036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816002015550508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4e0d5ecfe1a9bdb989299ad039e950ed9ad6b09bc1f35ba6fc490f11eed70d83604051611099906117f8565b60405180910390a35050505050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161112a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112190611858565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3033846040518463ffffffff1660e01b8152600401611212939291906117c1565b602060405180830381600087803b15801561122c57600080fd5b505af1158015611240573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611264919061158f565b503373ffffffffffffffffffffffffffffffffffffffff167f71848535b1b9b7fb3f4f13358abb2a84fcf34d9c252fbaa0cc8f0a7363807456600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040516112ea9190611953565b60405180910390a250565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008060005b600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811015611472578573ffffffffffffffffffffffffffffffffffffffff16600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106113fc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561145f576001925080915082829450945050505061147c565b808061146a90611a3d565b915050611324565b5081819350935050505b9250929050565b6000808260ff168460ff1614156114a157600390508091505061150c565b60008460ff161480156114b7575060028360ff16145b806114d4575060018460ff161480156114d3575060008360ff16145b5b806114f1575060028460ff161480156114f0575060018360ff16145b5b1561150357600190508091505061150c565b60029050809150505b92915050565b60008135905061152181611cea565b92915050565b60008151905061153681611d01565b92915050565b60008135905061154b81611d18565b92915050565b60008135905061156081611d2f565b92915050565b60006020828403121561157857600080fd5b600061158684828501611512565b91505092915050565b6000602082840312156115a157600080fd5b60006115af84828501611527565b91505092915050565b6000806000606084860312156115cd57600080fd5b60006115db8682870161153c565b93505060206115ec86828701611512565b92505060406115fd86828701611551565b9150509250925092565b611610816119e8565b82525050565b6000611623600c83611981565b915061162e82611ab5565b602082019050919050565b6000611646602883611981565b915061165182611ade565b604082019050919050565b6000611669600e83611981565b915061167482611b2d565b602082019050919050565b600061168c601783611981565b915061169782611b56565b602082019050919050565b60006116af600a83611981565b91506116ba82611b7f565b602082019050919050565b60006116d2600a83611981565b91506116dd82611ba8565b602082019050919050565b60006116f5602683611981565b915061170082611bd1565b604082019050919050565b6000611718601183611981565b915061172382611c20565b602082019050919050565b600061173b602b83611981565b915061174682611c49565b604082019050919050565b600061175e601883611981565b915061176982611c98565b602082019050919050565b6000611781600983611981565b915061178c82611cc1565b602082019050919050565b6117a081611a26565b82525050565b60006020820190506117bb6000830184611607565b92915050565b60006060820190506117d66000830186611607565b6117e36020830185611607565b6117f06040830184611797565b949350505050565b6000602082019050818103600083015261181181611616565b9050919050565b6000602082019050818103600083015261183181611639565b9050919050565b600060208201905081810360008301526118518161167f565b9050919050565b60006020820190508181036000830152611871816116a2565b9050919050565b60006020820190508181036000830152611891816116c5565b9050919050565b600060208201905081810360008301526118b1816116e8565b9050919050565b600060208201905081810360008301526118d18161170b565b9050919050565b600060208201905081810360008301526118f18161172e565b9050919050565b6000602082019050818103600083015261191181611751565b9050919050565b6000602082019050818103600083015261193181611774565b9050919050565b600060208201905061194d6000830184611797565b92915050565b60006040820190506119686000830184611797565b81810360208301526119798161165c565b905092915050565b600082825260208201905092915050565b600061199d82611a26565b91506119a883611a26565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156119dd576119dc611a86565b5b828201905092915050565b60006119f382611a06565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000611a4882611a26565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611a7b57611a7a611a86565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f67616d6520637265617465640000000000000000000000000000000000000000600082015250565b7f416c7265616479206368616c6c656e676564207468697320706c61796572207460008201527f6f20612067616d65000000000000000000000000000000000000000000000000602082015250565b7f52657761726420636c61696d6564000000000000000000000000000000000000600082015250565b7f4368616c6c656e67657220576f6e207468652047616d65000000000000000000600082015250565b7f6e6f207265776172647300000000000000000000000000000000000000000000600082015250565b7f66656520746f206c6f7700000000000000000000000000000000000000000000600082015250565b7f506c6179657220646964206e6f74206368616c6c656e676520796f7520746f2060008201527f612067616d650000000000000000000000000000000000000000000000000000602082015250565b7f47616d6520616c7265616479206f766572000000000000000000000000000000600082015250565b7f6d6f7665206861737420746f20626520303d526f636b2c20313d50617065722c60008201527f20323d53636973736f7273000000000000000000000000000000000000000000602082015250565b7f4368616c6c656e676572206c6f7374207468652047616d650000000000000000600082015250565b7f4974732061205469650000000000000000000000000000000000000000000000600082015250565b611cf3816119e8565b8114611cfe57600080fd5b50565b611d0a816119fa565b8114611d1557600080fd5b50565b611d2181611a26565b8114611d2c57600080fd5b50565b611d3881611a30565b8114611d4357600080fd5b5056fea2646970667358221220179cf4628c49a197aa6e15db8b2f38d5f6d1757f32cba66eed19fdb2fae7744264736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80630700037d14610067578063649677e114610097578063690d1d3b146100b5578063b08a9ca3146100d1578063b88a802f146100ed578063fc0c546a146100f7575b600080fd5b610081600480360381019061007c9190611566565b610115565b60405161008e9190611938565b60405180910390f35b61009f61012d565b6040516100ac9190611938565b60405180910390f35b6100cf60048036038101906100ca91906115b8565b610133565b005b6100eb60048036038101906100e691906115b8565b610c5a565b005b6100f56110a8565b005b6100ff6112f5565b60405161010c91906117a6565b60405180910390f35b60056020528060005260406000206000915090505481565b60025481565b600254831015610178576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016f90611878565b60405180910390fd5b600080610185843361131b565b9150915060011515821515146101d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c790611898565b60405180910390fd5b6000600381111561020a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110610281577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160000160009054906101000a900460ff1660038111156102d8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14610318576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030f906118b8565b60405180910390fd5b60008360ff16148061032d575060018360ff16145b8061033b575060028360ff16145b61037a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610371906118d8565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b81526004016103d9939291906117c1565b602060405180830381600087803b1580156103f357600080fd5b505af1158015610407573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042b919061158f565b5082600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106104a4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160000160026101000a81548160ff021916908360ff16021790555084600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110610545577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600302016002018190555060006105fb600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481106105d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160000160019054906101000a900460ff1685611483565b9050600086600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110610677577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201600201546106939190611992565b90506003808111156106ce577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b826003811115610707577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561091957600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110610784577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160020154600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546107e09190611992565b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555086600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461086e9190611992565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f4e0d5ecfe1a9bdb989299ad039e950ed9ad6b09bc1f35ba6fc490f11eed70d8360405161090c90611918565b60405180910390a3610b7b565b60016003811115610953577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b82600381111561098c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610a885780600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109dd9190611992565b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f4e0d5ecfe1a9bdb989299ad039e950ed9ad6b09bc1f35ba6fc490f11eed70d83604051610a7b90611838565b60405180910390a3610b7a565b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ad39190611992565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f4e0d5ecfe1a9bdb989299ad039e950ed9ad6b09bc1f35ba6fc490f11eed70d83604051610b71906118f8565b60405180910390a35b5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110610bf3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160000160006101000a81548160ff02191690836003811115610c4c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555050505050505050565b600254831015610c9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9690611878565b60405180910390fd5b600080610cac338561131b565b915091506000151582151514610cf7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cee90611818565b60405180910390fd5b60008360ff161480610d0c575060018360ff16145b80610d1a575060028360ff16145b610d59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d50906118d8565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b8152600401610db8939291906117c1565b602060405180830381600087803b158015610dd257600080fd5b505af1158015610de6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0a919061158f565b50600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060c0016040528060006003811115610e8f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020018560ff168152602001600560ff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff16815260200187815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548160ff02191690836003811115610f5d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360ff16021790555060608201518160000160036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816002015550508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4e0d5ecfe1a9bdb989299ad039e950ed9ad6b09bc1f35ba6fc490f11eed70d83604051611099906117f8565b60405180910390a35050505050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161112a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112190611858565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3033846040518463ffffffff1660e01b8152600401611212939291906117c1565b602060405180830381600087803b15801561122c57600080fd5b505af1158015611240573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611264919061158f565b503373ffffffffffffffffffffffffffffffffffffffff167f71848535b1b9b7fb3f4f13358abb2a84fcf34d9c252fbaa0cc8f0a7363807456600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040516112ea9190611953565b60405180910390a250565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008060005b600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811015611472578573ffffffffffffffffffffffffffffffffffffffff16600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106113fc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561145f576001925080915082829450945050505061147c565b808061146a90611a3d565b915050611324565b5081819350935050505b9250929050565b6000808260ff168460ff1614156114a157600390508091505061150c565b60008460ff161480156114b7575060028360ff16145b806114d4575060018460ff161480156114d3575060008360ff16145b5b806114f1575060028460ff161480156114f0575060018360ff16145b5b1561150357600190508091505061150c565b60029050809150505b92915050565b60008135905061152181611cea565b92915050565b60008151905061153681611d01565b92915050565b60008135905061154b81611d18565b92915050565b60008135905061156081611d2f565b92915050565b60006020828403121561157857600080fd5b600061158684828501611512565b91505092915050565b6000602082840312156115a157600080fd5b60006115af84828501611527565b91505092915050565b6000806000606084860312156115cd57600080fd5b60006115db8682870161153c565b93505060206115ec86828701611512565b92505060406115fd86828701611551565b9150509250925092565b611610816119e8565b82525050565b6000611623600c83611981565b915061162e82611ab5565b602082019050919050565b6000611646602883611981565b915061165182611ade565b604082019050919050565b6000611669600e83611981565b915061167482611b2d565b602082019050919050565b600061168c601783611981565b915061169782611b56565b602082019050919050565b60006116af600a83611981565b91506116ba82611b7f565b602082019050919050565b60006116d2600a83611981565b91506116dd82611ba8565b602082019050919050565b60006116f5602683611981565b915061170082611bd1565b604082019050919050565b6000611718601183611981565b915061172382611c20565b602082019050919050565b600061173b602b83611981565b915061174682611c49565b604082019050919050565b600061175e601883611981565b915061176982611c98565b602082019050919050565b6000611781600983611981565b915061178c82611cc1565b602082019050919050565b6117a081611a26565b82525050565b60006020820190506117bb6000830184611607565b92915050565b60006060820190506117d66000830186611607565b6117e36020830185611607565b6117f06040830184611797565b949350505050565b6000602082019050818103600083015261181181611616565b9050919050565b6000602082019050818103600083015261183181611639565b9050919050565b600060208201905081810360008301526118518161167f565b9050919050565b60006020820190508181036000830152611871816116a2565b9050919050565b60006020820190508181036000830152611891816116c5565b9050919050565b600060208201905081810360008301526118b1816116e8565b9050919050565b600060208201905081810360008301526118d18161170b565b9050919050565b600060208201905081810360008301526118f18161172e565b9050919050565b6000602082019050818103600083015261191181611751565b9050919050565b6000602082019050818103600083015261193181611774565b9050919050565b600060208201905061194d6000830184611797565b92915050565b60006040820190506119686000830184611797565b81810360208301526119798161165c565b905092915050565b600082825260208201905092915050565b600061199d82611a26565b91506119a883611a26565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156119dd576119dc611a86565b5b828201905092915050565b60006119f382611a06565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000611a4882611a26565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611a7b57611a7a611a86565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f67616d6520637265617465640000000000000000000000000000000000000000600082015250565b7f416c7265616479206368616c6c656e676564207468697320706c61796572207460008201527f6f20612067616d65000000000000000000000000000000000000000000000000602082015250565b7f52657761726420636c61696d6564000000000000000000000000000000000000600082015250565b7f4368616c6c656e67657220576f6e207468652047616d65000000000000000000600082015250565b7f6e6f207265776172647300000000000000000000000000000000000000000000600082015250565b7f66656520746f206c6f7700000000000000000000000000000000000000000000600082015250565b7f506c6179657220646964206e6f74206368616c6c656e676520796f7520746f2060008201527f612067616d650000000000000000000000000000000000000000000000000000602082015250565b7f47616d6520616c7265616479206f766572000000000000000000000000000000600082015250565b7f6d6f7665206861737420746f20626520303d526f636b2c20313d50617065722c60008201527f20323d53636973736f7273000000000000000000000000000000000000000000602082015250565b7f4368616c6c656e676572206c6f7374207468652047616d650000000000000000600082015250565b7f4974732061205469650000000000000000000000000000000000000000000000600082015250565b611cf3816119e8565b8114611cfe57600080fd5b50565b611d0a816119fa565b8114611d1557600080fd5b50565b611d2181611a26565b8114611d2c57600080fd5b50565b611d3881611a30565b8114611d4357600080fd5b5056fea2646970667358221220179cf4628c49a197aa6e15db8b2f38d5f6d1757f32cba66eed19fdb2fae7744264736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 82,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "player",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 84,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "opponent",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 86,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "entranceFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 88,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "token",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 94,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "games",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_struct(Game)133_storage)dyn_storage)"
      },
      {
        "astId": 98,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "rewards",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Game)133_storage)dyn_storage": {
        "base": "t_struct(Game)133_storage",
        "encoding": "dynamic_array",
        "label": "struct RockPaperScissors.Game[]",
        "numberOfBytes": "32"
      },
      "t_enum(Status)119": {
        "encoding": "inplace",
        "label": "enum RockPaperScissors.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(Game)133_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RockPaperScissors.Game[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Game)133_storage)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Game)133_storage": {
        "encoding": "inplace",
        "label": "struct RockPaperScissors.Game",
        "members": [
          {
            "astId": 122,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Status)119"
          },
          {
            "astId": 124,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "move1",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 126,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "move2",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 128,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "challenger",
            "offset": 3,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 130,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "opponent",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 132,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "jackpot",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}